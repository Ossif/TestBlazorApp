@page "/"
@rendermode InteractiveServer
@inject AppDbContext DbContext
@inject ILogger<Users> Logger


<h3>Справочник пользователей</h3>

@if (!isAddUserFormVisible){
    <button @onclick="ShowAddUserForm">Добавить пользователя</button>
}
@if (@isAddUserFormVisible)
{
    <EditForm Model="@newUser" OnValidSubmit="AddUser" style="display:row;">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label>Имя:</label>
            <InputText @bind-Value="newUser.FirstName" />
        </div>
        <div>
            <label>Фамилия:</label>
            <InputText @bind-Value="newUser.LastName" />
        </div>
        <div>
            <label>Отчество:</label>
            <InputText @bind-Value="newUser.SurName" />
        </div>
        <div>
            <label>Адрес:</label>
            <InputText @bind-Value="newUser.Address" />
        </div>
        <div>
            <label>Телефон:</label>
            <InputText @bind-Value="newUser.PhoneNumber" />
        </div>
        <button type="submit">Сохранить</button>
    </EditForm>
    <button @onclick="CancelAddingUser">Отменить добавление</button>
}
<QuickGrid Items="@users" Striped="true">
    <PropertyColumn Property="@(user => user.Id)" Sortable="true">
        <HeaderTemplate>
            <span style="">ID</span>
        </HeaderTemplate>
    </PropertyColumn>
    <PropertyColumn Property="@(user => user.FirstName)" Sortable="true">
        <HeaderTemplate>
            <span style="">Имя</span>
        </HeaderTemplate>
    </PropertyColumn>
    <PropertyColumn Property="@(user => user.LastName)" Sortable="true">
        <HeaderTemplate>
            <span style="">Фамилия</span>
        </HeaderTemplate>
    </PropertyColumn>
    <PropertyColumn Property="@(user => user.SurName)" Sortable="true">
        <HeaderTemplate>
            <span style="">Отчество</span>
        </HeaderTemplate>
    </PropertyColumn>
    <PropertyColumn Property="@(user => user.Address)" Sortable="true">
        <HeaderTemplate>
            <span style="">Адрес</span>
        </HeaderTemplate>
    </PropertyColumn>
    <PropertyColumn Property="@(user => user.PhoneNumber)" Sortable="true">
        <HeaderTemplate>
            <span style="">Имя</span>
        </HeaderTemplate>
    </PropertyColumn>
    <TemplateColumn Title="" Context="user">
        <img src = "binicon.svg" @onclick="@(() => DeleteUser(user))" style="width:20px; height:20px; color:red; cursor: pointer;"/>
    </TemplateColumn>
</QuickGrid>

@code {
    private IQueryable<User> users;
    private bool isAddUserFormVisible = false;
    private User newUser = new User();
    private User deletingUser;

    protected override void OnInitialized()
    {
        LoadUsers();
    }

    private void LoadUsers()
    {
        users = DbContext.Users.ToList().AsQueryable(); // Загрузка пользователей из базы данных
    }

    private void ShowAddUserForm() {
        Logger.LogInformation("Кнопка была нажата.");
        isAddUserFormVisible = true;
    }

    private void CancelAddingUser()
    {
        newUser = new User(); // Сброс формы
        isAddUserFormVisible = false; // Скрыть форму
    }

    private async Task AddUser()
    {
        DbContext.Users.Add(newUser);
        await DbContext.SaveChangesAsync();
        
        LoadUsers(); // Обновляем список пользователей

        newUser = new User(); // Сброс формы
        isAddUserFormVisible = false; // Скрыть форму
        StateHasChanged(); // Обновляем состояние компонента
    }

     private async Task DeleteUser(User user){
        DbContext.Users.Remove(user);
        await DbContext.SaveChangesAsync();
        
        LoadUsers(); // Обновляем список пользователей
        StateHasChanged(); // Обновляем состояние компонента
    }
}