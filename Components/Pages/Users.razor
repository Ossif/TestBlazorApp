@page "/"
@rendermode InteractiveServer
@using Aspose.Svg
@using Aspose.Svg.Dom
@using System.IO
@inject AppDbContext DbContext
@inject ILogger<Users> Logger
@inject IJSRuntime JSRuntime


<h3>Справочник пользователей</h3>

@if (!isAddUserFormVisible){
    <button @onclick="ShowAddUserForm" style="padding:10px;">Добавить пользователя</button>
}
<!--Поля создания новой записи-->
@if (@isAddUserFormVisible)
{
    <EditForm Model="@newUser" OnValidSubmit="AddUser" style="padding:10px;">
        <div style="display: flex; flex-wrap: wrap; gap: 10px; padding:10px;">
            <div class="vertical-container">
                <label>Имя*:</label>
                <InputText @bind-Value="newUser.FirstName" />
            </div>
            <div class="vertical-container">
                <label>Фамилия*:</label>
                <InputText @bind-Value="newUser.LastName" />
            </div>
            <div class="vertical-container">
                <label>Отчество*:</label>
                <InputText @bind-Value="newUser.SurName" />
            </div>
            <div class="vertical-container">
                <label>Город*:</label>
                <InputText @bind-Value="newUser.City" />
            </div>
            <div class="vertical-container">
                <label>Улица*:</label>
                <InputText @bind-Value="newUser.Square" />
            </div>
            <div class="vertical-container">
                <label>Номер дома*:</label>
                <InputText @bind-Value="newUser.HouseNumber" />
            </div>
            <div class="vertical-container">
                <label>Номер квартиры:</label>
                <InputText @bind-Value="newUser.ApartmentNumber" />
            </div>
            <div class="vertical-container">
                <label>Телефон*:</label>
                <InputText @bind-Value="newUser.PhoneNumber" />
            </div>
            <button type="submit" class = "btn-primary">Сохранить</button>
            <button @onclick="CancelAddingUser" class = "btn-cancel">Отменить добавление</button>
        </div>
        <DataAnnotationsValidator />
        <ValidationSummary />
    </EditForm>
}
<div style="padding:10px;">
    <label for="userCount" >Показать:</label>
    <select @onchange="OnUserCountChange" id="userCount">
        <option value="25">25</option>
        <option value="50">50</option>
        <option value="100">100</option>
    </select>
</div>

<!--Таблица-->

<QuickGrid Items="@users" Striped="true">
     <!--TODO: СОЗДАТЬ КАСТОМНЫЙ ТЕГ SortableColumn ДЛЯ ИЗБЕЖАНИЯ ПОВТОРЕНИЯ КОДА - ОН Включает PropertyColumn С ДОЧ. ЭЛЕМ-И (см выше)-->
    <PropertyColumn Property="@(user => user.Id)" Sortable="true">
        <HeaderTemplate>
            <span style="" @onclick="@(() => SortColumn("Id"))">
                @if (sortedColumn == "Id")
                {
                    <span>@(isAscending ? "▲" : "▼")</span>
                }
                Id
            </span>
            <FilterTag ColumnName="Id" OnFilterClicked="ShowFilter" IsActive="@filters["Id"].IsActive"/>
        </HeaderTemplate>
    </PropertyColumn>

    <PropertyColumn Property="@(user => user.FirstName)" Sortable="true">
        <HeaderTemplate>
            <span style="" @onclick="@(() => SortColumn("FirstName"))">
                @if (sortedColumn == "FirstName")
                {
                    <span>@(isAscending ? "▲" : "▼")</span>
                }
                Имя
            </span>
            <FilterTag ColumnName="FirstName" OnFilterClicked="ShowFilter" IsActive="@filters["FirstName"].IsActive"/>
        </HeaderTemplate>
    </PropertyColumn>
    <PropertyColumn Property="@(user => user.LastName)" Sortable="true">
        <HeaderTemplate>
            <span style="" @onclick="@(() => SortColumn("LastName"))">
                @if (sortedColumn == "LastName")
                {
                    <span>@(isAscending ? "▲" : "▼")</span>
                }
                Фамилия
            </span>
            <FilterTag ColumnName="LastName" OnFilterClicked="ShowFilter" IsActive="@filters["LastName"].IsActive"/>
        </HeaderTemplate>
    </PropertyColumn>
    <PropertyColumn Property="@(user => user.SurName)" Sortable="true">
        <HeaderTemplate>
            <span style="" @onclick="@(() => SortColumn("SurName"))">
                @if (sortedColumn == "SurName")
                {
                    <span>@(isAscending ? "▲" : "▼")</span>
                }
                Отчество
            </span>
            <FilterTag ColumnName="SurName" OnFilterClicked="ShowFilter" IsActive="@filters["SurName"].IsActive"/>
        </HeaderTemplate>
    </PropertyColumn>
    <PropertyColumn Property="@(user => user.City)" Sortable="true">
        <HeaderTemplate>
            <span style="" @onclick="@(() => SortColumn("City"))">
                @if (sortedColumn == "City")
                {
                    <span>@(isAscending ? "▲" : "▼")</span>
                }
                Город
            </span>
            <FilterTag ColumnName="City" OnFilterClicked="ShowFilter" IsActive="@filters["City"].IsActive"/>
        </HeaderTemplate>
    </PropertyColumn>
    <PropertyColumn Property="@(user => user.Square)" Sortable="true">
        <HeaderTemplate>
            <span style="" @onclick="@(() => SortColumn("Square"))">
                @if (sortedColumn == "Square")
                {
                    <span>@(isAscending ? "▲" : "▼")</span>
                }
                Площадь
            </span>
            <FilterTag ColumnName="Square" OnFilterClicked="ShowFilter" IsActive="@filters["Square"].IsActive"/>
        </HeaderTemplate>
    </PropertyColumn>
    <PropertyColumn Property="@(user => user.HouseNumber)" Sortable="true">
        <HeaderTemplate>
            <span style="" @onclick="@(() => SortColumn("HouseNumber"))">
                @if (sortedColumn == "HouseNumber")
                {
                    <span>@(isAscending ? "▲" : "▼")</span>
                }
                Номер дома
            </span>
            <FilterTag ColumnName="HouseNumber" OnFilterClicked="ShowFilter" IsActive="@filters["HouseNumber"].IsActive"/>
        </HeaderTemplate>
    </PropertyColumn>
    <PropertyColumn Property="@(user => user.ApartmentNumber)" Sortable="true">
        <HeaderTemplate>
            <span style="" @onclick="@(() => SortColumn("ApartmentNumber"))">
                @if (sortedColumn == "ApartmentNumber")
                {
                    <span>@(isAscending ? "▲" : "▼")</span>
                }
                Номер квартиры
            </span>
            <FilterTag ColumnName="ApartmentNumber" OnFilterClicked="ShowFilter" IsActive="@filters["ApartmentNumber"].IsActive"/>
        </HeaderTemplate>
    </PropertyColumn>
    <PropertyColumn Property="@(user => user.PhoneNumber)" Sortable="true">
        <HeaderTemplate>
            <span style="" @onclick="@(() => SortColumn("PhoneNumber"))">
                @if (sortedColumn == "PhoneNumber")
                {
                    <span>@(isAscending ? "▲" : "▼")</span>
                }
                Номер телефона
            </span>
            <FilterTag ColumnName="PhoneNumber" OnFilterClicked="ShowFilter" IsActive="@filters["PhoneNumber"].IsActive"/>
        </HeaderTemplate>
    </PropertyColumn>

    <!--TODO: СОЗДАТЬ КАСТОМНЫЙ ТЕГ SortableColumn ДЛЯ ИЗБЕЖАНИЯ ПОВТОРЕНИЯ КОДА - ОН Включает PropertyColumn С ДОЧ. ЭЛЕМ-И (см выше)-->
    <!--SortableColumn TItem="User" Property="@(user => user.Square)"
                HeaderText="Площадь"
                ColumnName="Square"
                SortedColumn="@sortedColumn"
                IsAscending="isAscending"
                IsActive="@filters["Square"].IsActive"
                SortColumn="SortColumn" /-->


    <TemplateColumn Title="" Context="user">
        <HeaderTemplate>
            <span style="background-color:orange;border-radius 5px;cursor:pointer;margin:5px;" @onclick="ClearFilters">Очистить фильтры</span>
        </HeaderTemplate>
        <ChildContent>
            <img id="binSVG" src="binicon.svg" style="width:20px;height:20px;cursor:pointer;" @onclick="@(() => ShowDeleteConfirmation(user))"/>
        </ChildContent>
    </TemplateColumn>
</QuickGrid>
<div style="padding:10px;">
    <button @onclick="PreviousPage" disabled="@(!CanGoToPrevious)">Назад</button>
    <span>Страница @currentPage из @TotalPages</span>
    <button @onclick="NextPage" disabled="@(!CanGoToNext)">Вперед</button>
</div>
<button @onclick="AddTestUsers" class="btn-test" style="padding:10px;">Добавить 100 тестовых пользователей</button>
<ConfirmationModal IsVisible="@isConfirmationVisible"
                   OnConfirmed="@DeleteUserConfirmed"
                   OnCancelled="@CancelDeleteUser" />

<!--окно настройки фильтра-->
@if (isFilterVisible)
{
    <div class="filter-modal" style="top: @filterModalTop; left: @filterModalLeft;">
        <h5>Фильтр по значению @currFilterId</h5>
        <div>
            <label>
                <input type="radio" checked="@(filters[@currFilterId].FilterChoice==0?true:false)" name="filterType" 
                @onclick="@(() => filters[@currFilterId].FilterChoice = 0)"/> Равняется
            </label>
            <label>
                <input type="radio" checked="@(filters[@currFilterId].FilterChoice==1?true:false)" name="filterType"
                @onclick="@(() => filters[@currFilterId].FilterChoice = 1)"/> Включает
            </label>
        </div>
        <input value="@currFilterQuery" placeholder="Введите значение..." @oninput="(e) => HandleFilterInput(e)"/>
        <button @onclick="ApplyFilter">Применить фильтры</button>
        
    </div>
}






@code {
    //|||||--------------------------------ПЕРЕМЕННЫЕ-------------------------------------------|||||
    
    //СПИСОК ПОЛЬЗОВАТЕЛЕЙ
    private IQueryable<User> users;
    
    //ПЕРЕМЕННЫЕ ДЛЯ ДОБАВЛЕНИЯ/УДАЛЕНИЯ ПОЛЬЗОВАТЕЛЕЙ
    private bool isAddUserFormVisible = false;
    private User newUser = new User();
    private bool isConfirmationVisible = false;
    private User deletingUser;

    //ОКНО НАСТРОЙКИ ФИЛЬТРОВ
    private bool isFilterVisible = false;               //Видно ли окно
    private string filterModalTop = "0px";              // Позиция сверху
    private string filterModalLeft = "0px";             // Позиция слева
    private string currFilterId;                        //По какому столбцу сейчас идет фильтрация
    private string currFilterQuery;                     //Текущий введенный запрос в поле

    //СЛОВАРЬ ФИЛЬТРОВ
        //[Для корректной работы приложения, при добавления новой кнопки фильтров,
        //необходимо скопировать одну из строк и изменить ключ на имя столбца в бд,
        //по которому будет идти фильтрация]
    private static Dictionary<string, FilterData> filters = new Dictionary<string, FilterData>
    {
        { "Id", new FilterData { Query = string.Empty, FilterChoice = 0, IsActive = false } },
        { "FirstName", new FilterData { Query = string.Empty, FilterChoice = 0, IsActive = false } },
        { "LastName", new FilterData { Query = string.Empty, FilterChoice = 0, IsActive = false } },
        { "SurName", new FilterData { Query = string.Empty, FilterChoice = 0, IsActive = false } },
        { "City", new FilterData { Query = string.Empty, FilterChoice = 0, IsActive = false } },
        { "Square", new FilterData { Query = string.Empty, FilterChoice = 0, IsActive = false } },
        { "HouseNumber", new FilterData { Query = string.Empty, FilterChoice = 0, IsActive = false } },
        { "ApartmentNumber", new FilterData { Query = string.Empty, FilterChoice = 0, IsActive = false } },
        { "PhoneNumber", new FilterData { Query = string.Empty, FilterChoice = 0, IsActive = false } },
        // Добавьте другие поля по мере необходимости
    };

    //СОРТИРОВКА
    private string sortedColumn;                        // Текущий столбец для сортировки
    private bool isAscending;                           // Направление сортировки (возрастание или убывание)


    //ПАГИНАЦИЯ
    private int userCount = 25;                                 // По умолчанию 25 пользователей на странице
    private int totalUsers;                                     // Общее количество пользователей
    private int TotalPages => (int)Math.Ceiling((double)totalUsers / userCount);//Всего страниц
    private int currentPage = 1;                                // Текущая страница
    private bool CanGoToPrevious => currentPage > 1;            //Можно перейти назад по страницам?
    private bool CanGoToNext => currentPage < TotalPages;       //Можно перейти вперед по страницам?








    //|||||-------------------------------OVERRIDES----------------------------------------|||||

    protected override void OnInitialized(){
        base.OnInitialized();
        LoadUsers();
    }
    /*
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("changeSVGColor", new object[] { "binSVG" }, "red");
        }
    }*/
    
    //|||||---------------------------УПРАВЛЕНИЕ ЗАПИСЯМИ ТАБЛИЦЫ-------------------------|||||

    //Обновление таблицы пользователей
    private void LoadUsers()
    {

        var query = DbContext.Users.AsQueryable();
        
        // Применение фильтрации на основе словаря фильтров
        foreach (var filter in filters)
        {
            if (filter.Value.IsActive && !string.IsNullOrEmpty(filter.Value.Query))
            {
                switch (filter.Value.FilterChoice)
                {
                    case 0: // Равенство
                        query = query.Where(user => EF.Property<string>(user, filter.Key) == filter.Value.Query);
                        break;
                    case 1: // Вхождение
                        query = query.Where(user => EF.Property<string>(user, filter.Key).Contains(filter.Value.Query));
                        break;
                    default:
                        break;
                }
            }
        }

        // Сортировка
        if (!string.IsNullOrEmpty(sortedColumn))
        {
            if (isAscending)
            {
                query = query.OrderBy(user => EF.Property<string>(user, sortedColumn));
            }
            else
            {
                query = query.OrderByDescending(user => EF.Property<string>(user, sortedColumn));
            }
        }

        // Проверяем, нужно ли сбрасывать текущую страницу
        if (currentPage > TotalPages)
        {
            currentPage = 1; 
        }

        totalUsers = query.Count(); // Получаем общее количество пользователей
        users = query.Skip((currentPage - 1) * userCount).Take(userCount).ToList().AsQueryable(); // Загружаем только нужное количество пользователей
    }

    //Отображение формы создания записи о пользователе
    private void ShowAddUserForm() {
        isAddUserFormVisible = true;
    }

    //Отмена создания новой записи о пользователе
    private void CancelAddingUser()
    {
        newUser = new User(); // Сброс формы
        isAddUserFormVisible = false; // Скрыть форму
    }

    //Добавление новой записи о пользователе
    private async Task AddUser()
    {
        DbContext.Users.Add(newUser);
        await DbContext.SaveChangesAsync();
        
        LoadUsers(); // Обновляем список пользователей

        newUser = new User(); // Сброс формы
        isAddUserFormVisible = false; // Скрыть форму
        StateHasChanged(); // Обновляем состояние компонента
    }

    //Отображение подтверждения об удалении записи
    private void ShowDeleteConfirmation(User user)
    {
        deletingUser = user;
        isConfirmationVisible = true; // Показать окно подтверждения
    }

    //Удаление записи после подтверждения
    private async Task DeleteUserConfirmed(bool confirmed)
    {
        if (confirmed && deletingUser != null)
        {
            DbContext.Users.Remove(deletingUser);
            await DbContext.SaveChangesAsync();
            LoadUsers(); // Обновляем список пользователей
        }
        isConfirmationVisible = false; // Скрыть окно подтверждения
        StateHasChanged(); // Обновляем состояние компонента
    }

    //Отмена удаления записи
    private void CancelDeleteUser(bool cancelled)
    {
        isConfirmationVisible = false; // Скрыть окно подтверждения
    }



    //|||||-----------------------------ФИЛЬТРЫ-------------------------------------|||||
    //Открытие окна настройки фильтра
    private async Task ShowFilter(string columnName)
    {
        if(currFilterId == null) currFilterId = columnName;
        string newFilterId = columnName;
        //Logger.LogInformation("Компонент Users инициализирован в {newFilterId}", newFilterId);
        if(!isFilterVisible){
            isFilterVisible = true;

            currFilterId = newFilterId;
            currFilterQuery=filters[currFilterId].Query;
            //получение позиции кнопки фильтра
            var position = await JSRuntime.InvokeAsync<Position>("getElementPosition", new object[] { currFilterId });
            if (position != null)
            {
                filterModalTop = $"{(int)position.top}px"; // Устанавливаем позицию окна сверху
                filterModalLeft = $"{(int)position.left}px"; // Устанавливаем позицию окна слева
            }
        }
        else{
            if(newFilterId != currFilterId){
                //Пользователь нажал на другой фильтр, обновляем значения
                currFilterId = newFilterId;
                currFilterQuery=filters[currFilterId].Query;

                //получение позиции кнопки фильтра
                var position = await JSRuntime.InvokeAsync<Position>("getElementPosition", new object[] { currFilterId });
                if (position != null)
                {
                    filterModalTop = $"{(int)position.top}px"; // Устанавливаем позицию окна сверху
                    filterModalLeft = $"{(int)position.left}px"; // Устанавливаем позицию окна слева
                }
            }
            else{
                isFilterVisible = false;
            }
        }
        StateHasChanged(); // Обновляем состояние компонента
    }

    //Хендлинг при вводе в поле ввода фильтра
    private void HandleFilterInput(ChangeEventArgs e)
    {
        currFilterQuery = e.Value.ToString();
        UpdateFilter(e);
    }

    //Обновление фильтра после ввода данных
    private void UpdateFilter(ChangeEventArgs e)
    {
        Logger.LogInformation("UpdateFilter");
        if (filters.ContainsKey(currFilterId))
        {
            filters[currFilterId].Query = currFilterQuery;
            filters[currFilterId].IsActive = !string.IsNullOrEmpty(currFilterQuery); // Активен, если есть значение
            Logger.LogInformation("Обновляем фильтр {currFilterId} - теперь его значения равны {filters[currFilterId].Query}, {filters[currFilterId].IsActive}", 
                currFilterId, filters[currFilterId].Query, filters[currFilterId].IsActive);
        }
    }

    //Применение фильтра
    private void ApplyFilter()
    {
        LoadUsers(); // Применить фильтр и загрузить пользователей
        StateHasChanged();
        isFilterVisible = false; // Скрыть окно фильтрации
    }

    //Очистка всех фильтров
    private void ClearFilters()
    {
        foreach (var filter in filters)
        {
            filter.Value.IsActive = false;
            filter.Value.Query = "";
            filter.Value.FilterChoice = 0;
        }
        sortedColumn = null;
        LoadUsers(); // Перезагрузить пользователей без фильтров
    }

    //Отмена настройки фильтра
    private void CancelFilter()
    {
        isFilterVisible = false; // Скрыть окно фильтрации
    }


    //|||||------------------------------------ПАГИНАЦИЯ-------------------------------------|||||
    //Изменения количества отображаемых записей
    private void OnUserCountChange(ChangeEventArgs e)
    {
        userCount = int.Parse(e.Value.ToString());
        currentPage = 1; // Сброс к первой странице при изменении количества
        LoadUsers(); // Перезагрузить пользователей с новыми настройками
    }

    //Переход на прошлую страницу
    private void PreviousPage()
    {
        if (CanGoToPrevious)
        {
            currentPage--;
            LoadUsers();
        }
    }

    //Переход на следующую страницу
    private void NextPage()
    {
        if (CanGoToNext)
        {
            currentPage++;
            LoadUsers();
        }
    }

    //|||||----------------------------ТЕСТОВЫЙ ФУНКИЦОНАЛ----------------------------|||||
    //Добавление 100 тестовых записей в таблицу
    private async Task AddTestUsers()
    {
        for (int i = 1; i <= 100; i++)
        {
            var testUser = new User
            {
                FirstName = $"Имя{i}",
                LastName = $"Фамилия{i}",
                SurName = $"Отчество{i}",
                City = $"Город{i}",
                Square = $"Площадь{i}",
                HouseNumber = $"{i}",
                ApartmentNumber = $"{(i % 10) + 1}", // Номера квартир от 1 до 10
                PhoneNumber = $"(999) 123-45-{i:D2}" // Формат номера телефона
            };

            DbContext.Users.Add(testUser);
        }

        await DbContext.SaveChangesAsync();
        LoadUsers(); // Обновляем список пользователей
    }

    //|||||------------------------------------СОРТИРОВКА----------------------------------|||||
    //Обработка нажатия на заголовок столбца - смена вида сортировки
    private void SortColumn(string columnName)
    {
        if (sortedColumn == columnName)
        {
            // Если уже отсортировано по этому столбцу, переключаем направление
            isAscending = !isAscending;
        }
        else
        {
            // Устанавливаем новый столбец для сортировки и направление по умолчанию (возрастание)
            sortedColumn = columnName;
            isAscending = true;
        }

        LoadUsers(); // Перезагружаем пользователей с учетом новой сортировки
    }


    //|||||------------------------------------ОБЬЕКТЫ----------------------------------|||||
    public class Position
    {
        public double top { get; set; }
        public double left { get; set; }
    }
}