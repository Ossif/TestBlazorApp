@page "/"
@rendermode InteractiveServer
@inject AppDbContext DbContext
@inject ILogger<Users> Logger


<h3>Справочник пользователей</h3>

@if (!isAddUserFormVisible){
    <button @onclick="ShowAddUserForm">Добавить пользователя</button>
}
@if (@isAddUserFormVisible)
{
    <EditForm Model="@newUser" OnValidSubmit="AddUser">
        <div style="display: flex; flex-wrap: wrap; gap: 10px; padding:10px;">
            <div class="vertical-container">
                <label>Имя:</label>
                <InputText @bind-Value="newUser.FirstName" />
            </div>
            <div class="vertical-container">
                <label>Фамилия:</label>
                <InputText @bind-Value="newUser.LastName" />
            </div>
            <div class="vertical-container">
                <label>Отчество:</label>
                <InputText @bind-Value="newUser.SurName" />
            </div>
            <div class="vertical-container">
                <label>Адрес:</label>
                <InputText @bind-Value="newUser.Address" />
            </div>
            <div class="vertical-container">
                <label>Телефон:</label>
                <InputText @bind-Value="newUser.PhoneNumber" />
            </div>
            <button type="submit" class = "btn-primary">Сохранить</button>
            <button @onclick="CancelAddingUser" class = "btn-cancel">Отменить добавление</button>
        </div>
        <DataAnnotationsValidator />
        <ValidationSummary />
    </EditForm>
}
<QuickGrid Items="@users" Striped="true">
    <PropertyColumn Property="@(user => user.Id)" Sortable="true">
        <HeaderTemplate>
            <span style="">ID</span>
        </HeaderTemplate>
    </PropertyColumn>
    <PropertyColumn Property="@(user => user.FirstName)" Sortable="true">
        <HeaderTemplate>
            <span style="">Имя</span>
        </HeaderTemplate>
    </PropertyColumn>
    <PropertyColumn Property="@(user => user.LastName)" Sortable="true">
        <HeaderTemplate>
            <span style="">Фамилия</span>
        </HeaderTemplate>
    </PropertyColumn>
    <PropertyColumn Property="@(user => user.SurName)" Sortable="true">
        <HeaderTemplate>
            <span style="">Отчество</span>
        </HeaderTemplate>
    </PropertyColumn>
    <PropertyColumn Property="@(user => user.Address)" Sortable="true">
        <HeaderTemplate>
            <span style="">Адрес</span>
        </HeaderTemplate>
    </PropertyColumn>
    <PropertyColumn Property="@(user => user.PhoneNumber)" Sortable="true">
        <HeaderTemplate>
            <span style="">Номер телефона</span>
        </HeaderTemplate>
    </PropertyColumn>
    <TemplateColumn Title="" Context="user">
        <img src = "binicon.svg" @onclick="@(() => ShowDeleteConfirmation(user))" style="width:20px; height:20px; color:red; cursor: pointer;"/>
    </TemplateColumn>
</QuickGrid>

<ConfirmationModal IsVisible="@isConfirmationVisible"
                   OnConfirmed="@DeleteUserConfirmed"
                   OnCancelled="@CancelDeleteUser" />

@code {
    private IQueryable<User> users;
    private bool isAddUserFormVisible = false;
    private User newUser = new User();
    // Новые переменные
    private bool isConfirmationVisible = false;
    private User deletingUser;

    protected override void OnInitialized()
    {
        LoadUsers();
    }

    private void LoadUsers()
    {
        users = DbContext.Users.ToList().AsQueryable(); // Загрузка пользователей из базы данных
    }

    private void ShowAddUserForm() {
        Logger.LogInformation("Кнопка была нажата.");
        isAddUserFormVisible = true;
    }

    private void CancelAddingUser()
    {
        newUser = new User(); // Сброс формы
        isAddUserFormVisible = false; // Скрыть форму
    }

    private async Task AddUser()
    {
        DbContext.Users.Add(newUser);
        await DbContext.SaveChangesAsync();
        
        LoadUsers(); // Обновляем список пользователей

        newUser = new User(); // Сброс формы
        isAddUserFormVisible = false; // Скрыть форму
        StateHasChanged(); // Обновляем состояние компонента
    }

    private void ShowDeleteConfirmation(User user)
     {
         deletingUser = user;
         isConfirmationVisible = true; // Показать окно подтверждения
     }

     private async Task DeleteUserConfirmed(bool confirmed)
     {
         if (confirmed && deletingUser != null)
         {
             DbContext.Users.Remove(deletingUser);
             await DbContext.SaveChangesAsync();
             LoadUsers(); // Обновляем список пользователей
         }
         isConfirmationVisible = false; // Скрыть окно подтверждения
         StateHasChanged(); // Обновляем состояние компонента
     }

     private void CancelDeleteUser(bool cancelled)
     {
         isConfirmationVisible = false; // Скрыть окно подтверждения
     }
}